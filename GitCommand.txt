
git push: 用于将本地分支的更新推送到远程主机
格式： $git push <远程主机名> <本地分支名>:<远程分支名>
     分支推送写法的顺序<来源地>:<目的地>,所以
	        git pull <远程分支><本地分支>
	 	git push <本地分支><远程分支>
	 
	 $git pull <远程主机名> <远程分支名>:<本地分支名>(追踪后可省略远程分支名;直接与当前分支合并可省略本地分支名)
	    git pull origin 
	 $git push <远程主机名> <本地分支名>:<远程分支名>(如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"
	                                          的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。)
		git push origin master
		git push origin :master              (如果省略本地分支名，则表示删除指定的远程分支，
		                                      因为这等同于推送一个空的本地分支到远程分支。)
	 $git remote add origin git@github.com:harcy/ForumDemo.git
	    首次推送添加远程代码库的配置
	 
	 $git checkout -- file  丢弃本地的某个文件的修改，一定需要添加 -- 符号
	 
	 $git config --global user.name "Your Real Name"
         $git config --global user.email you@email.address
	 $git config --list //读取环境各个配置属性的值
	 
	 ssh-keygen -C 'your@email.address' -t rsa
	 
	 (正在feature分支上开发，需要去处理另一个无关的bug，先运行git stash,然后checkout master, 新建branch处理解决bug，
	 最后checkout到feature分支，运行git stash apply，恢复所有的change继续开发)
	 git stash
	 git stash apply
	 
	  git log --pretty=oneline --abbrev-commit //打印整洁的commit log

          git branch -m new-branch //修改现有branch的分支名
 
          git show commit-id //查看本次commitid修改的代码
	  
	  git diff --stat //不加参数比较文件内容的不同，--stat参数只显示有修改的文件列表
	  
	  git cherry-pick commit-id //将其他分支的某个commit加到本分支上来
	  
	  git checkout -b branchName origin/branchName //从远程分支拉取到本地并在本地创建该分支，建立起跟远端映射关系

